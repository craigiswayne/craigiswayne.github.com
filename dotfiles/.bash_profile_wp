function wp_project_type () {
  [[ ! -z $1 ]] && start="$1" || start=".";

  if [[ -f "$1/composer.json" ]]
  then
    echo "composer";
    return;
  elif [[ -d "$1/themes" || -d "$1/plugins" || -d "$1/uploads" ]]
  then
    echo "wp-content";
    return;
  elif [[ -d "$1/wp-admin" ]]
  then
    echo "wp-full";
    return;
  fi;

  echo "unknown";
}


function wp_config_sample () {
    wp core config --dbname=fixit_tuis --dbuser=wordpress --dbpass=wordpress;
    wget https://raw.githubusercontent.com/WordPress/WordPress/master/wp-config-sample.php
    # wp eval 'get_home_path();';
}

function wp_git_site () {
  cd /;
  console.info "Step 1 - Get Git URL";
  git_url=$(get_user_input "Enter in the git url" --validate=git); #todo validate
  # git_url=$(get_user_input "Enter in the git url"); #todo validate


  console.info "Step 2 - Calculate required variables";
  web_root=/usr/local/var/www; #todo autocalulate this
  site_name=$(wp_site_name);
  site_url=local.$site_name;

  db_name=$site_name;
  db_name=$(strip_tld $db_name);
  db_name=$(safe_db_name $db_name);
  db_name=$(get_user_input "Enter in the DB Name" --default="$db_name");
  temp_dir=$(get_temp_dir);


  console.info "Step 3 - Check if site exists locally";
  overwrite=false;
  if [[ -d "$web_root/$site_name" ]]
  then
    console.info "Step 3Y - Ask the user to if they want to overwrite or not";
    overwrite=$(get_user_input "This site folder already exists @ $web_root/$site_name! Would you like to ovewrite it?" --default=$overwrite);
    overwrite=$(parse_boolean $overwrite);
  fi;


  console.info "Step 4 - Clone to Temp Dir... ($temp_dir)";
  if [[ "$overwrite" == true || ! -d "$web_root/$site_name" ]]
  then
    rm -rf $web_root/$site_name;
    git clone --recursive -b master $git_url "$temp_dir";
  else
    temp_dir="$web_root/$site_name";
  fi;


  project_type=$(wp_project_type $temp_dir);
  console.info "Step 5 - Determine project type ($project_type)";
  case "$project_type" in
      wp-full)
        mv $temp_dir $web_root/$site_name;
      ;;

      composer)
        cd $temp_dir;
        composer install;
        cd /;
        mv $temp_dir $web_root/$site_name;
      ;;


      wp-content)
        mkdir -p $web_root/$site_name;
        cd $web_root/$site_name;
        wp core download --allow-root;
        rm -rf wp-content;
        mv $temp_dir $web_root/$site_name/wp-content;
      ;;

      *)
        console.danger "Something went wrong in the case statement...";
      ;;
  esac

  git_root=$(git_calc_root $web_root/$site_name);
  console.info "Step 6 - Calculate Git Root ($git_root)";

  console.info "Step 7 - Get All Branches"
  cd $git_root;
  git_get_all_branches;

  console.info "Step 8 - Check if Develop exists";
  develop_exists=$(git_show_all_branches | grep develop);
  dev_exists=$(git_show_all_branches | grep dev);
  source_branch=master;
  if [[ ! -z "$develop_exists" ]]
  then
    source_branch=develop;
  elif [[ ! -z "$dev_exists" ]]
  then
    source_branch=dev;
  fi;

  console.info "Step 9 - Get Latest Code from Develop branch";
  get_latest_code $source_branch;


  console.info "Step 10 - Configure WordPress"
  cd $web_root/$site_name;
  wp core config --dbname=$db_name --dbuser=wordpress --dbpass=wordpress;


  console.info "Step 11 - Create the DB";
  wp db create;


  console.info "Step 12 - Finish Installing WordPress";
  wp core install --url=$site_url --title=$site_name --admin_user=$(strip_email_domain) --admin_password=admin --admin_email=$(git config user.email);


  console.info "Step 13 - Maybe activate first available theme";
  wp theme activate $(wp theme list --field=name --skip-plugins --skip-themes | head -n 1) --skip-themes --skip-plugins;


  console.info "(Skipping) Step 14 - Maybe Add Nginx Configs";
  # # maybe_add_nginx_configs $site_name;


  console.info "Step 15 - Maybe Add Host Entry";
  maybe_add_host_entry $site_url "/etc/hosts";

  console.info "Step 16 - Maybe import the DB from Dev";
  if [ $(dev_db_exists $db_name) == 'true' ]
  then
   import_from_dev_confirm=$(get_user_input "Would you like to import the db from dev" --default=yes);
   if [ import_from_dev_confirm == 'yes' ]
   then
     wp_import_database_from_dev;
   fi;
  fi;


  # console.info "Step 15 - Maybe Import Database from DEV";
  # git_url=$(get_user_input "Enter in the git url" --validate=git); #todo validate
  #import_database_from_dev;

  console.info "Last Step - Open in phpStorm and Browser";
  pstorm ~/www/$site_name;
  open http://$site_url;

  rm -rf $temp_dir;
}

function wp_install_dev_tools () {
  console.info "Installing WP Dev Tools...";
  wp plugin install debug-bar --activate;
  wp plugin install wordpress-importer --activate;
  wp plugin install theme-check --activate;
  wp plugin install log-deprecated-notices --activate
  wp plugin install debug-bar-cron --activate
  wp plugin install p3-profiler --activate
  wp plugin install wpperformancetester --activate
  wp plugin install simply-show-hooks --activate
  wp plugin install post-duplicator --activate
  console.info "";
}


function wp_site_url (){
  site_url=$(wp option get siteurl --skip-plugins --skip-themes);
  site_url=$(strip_protocol_from_string $site_url);
  site_url=$(strip_local_subdomain_from_string $site_url);
  site_url=$(strip_dev_subdomain_from_string $site_url);

  if [ -z $site_url ]
  then
    site_url=$(get_user_input "Enter in the Site URL with no protocol and no subdomain, and no environment subdomain" --default=$site_url);
  fi;

  echo $site_url;
}


function wp_site_name (){
  # site_name=${git_url##*/};
  # site_name=${site_name%.*};
  site_name=$(git_repo_name);
  site_name=$(get_user_input "Enter in the Site Name" --default=$site_name)
  echo $site_name;
}

function wp_db_name () {
  db_name=$(wp eval 'echo DB_NAME;' --skip-themes --skip-plugins);
  # db_name=$(wp_site_url);
  # db_name=$(strip_tld $db_name);
  # db_name=$(safe_db_name $db_name);
  # db_name=$(get_user_input "Enter in the DB Name" --default="$db_name" --default=$db_name);
  echo $db_name;
}

function wp_fix_site_urls () {
  wp search-replace 'celebratingwomen.w24.co.za' 'local.machinesofmining.news24.com' wp_*options
}


function wp_replace_urls () {

  sub_domains=( dev staging www );
  desired_sub_domain=local;

  protocols=( http https );
  site_url=$(wp_site_url);
  site=""; # leave unchanged
  site_temp="$site_url";
  site_temp=$(strip_tld $site_temp);
  site_temp=$(get_user_input "Enter Site Name without any environment prefixes" --default="$site_temp");

  for sub_domain in "${sub_domains[@]}"
  do
    for protocol in "${protocols[@]}"
    do
      search="$protocol://$sub_domain";
      site=${site_temp##$search.};
      site_temp=$site;
    done
  done


  for sub_domain in "${sub_domains[@]}"
  do
    for protocol in "${protocols[@]}"
    do

      if [ $sub_domain != $desired_sub_domain ]
      then
        echo "";
        echo "Replacing $protocol://$sub_domain.$site -> http://$desired_sub_domain.$site";
        wp search-replace "$protocol://$sub_domain.$site" "http://$desired_sub_domain.$site" --precise  --all-tables;
        wp search-replace "$sub_domain.$site" "http://$desired_sub_domain.$site" --precise  --all-tables;
      fi;

    done
  done

  # Replace instances in the db where no subdomain is specified
  for protocol in "${protocols[@]}"
  do
    echo "";
    echo "Replacing $protocol://$site -> http://$desired_sub_domain.$site";
    wp search-replace "$protocol://$sub_domain.$site" "http://$desired_sub_domain.$site" --precise  --all-tables;
  done
}

function wp_import_database_from_dev () {

  if [ ! -f wp-config.php ]
  then
    echo "install wp first";
    exit 1;
  fi;

  #todo maybe create db
  #todo maybe core install

  #wp db create;
  #wp core install;
  db_name=$(get_user_input "Enter in Database Name" --default=$(wp_db_name));
  if [ $(dev_db_exists $db_name) == 'false' ]
  then
    show_databases_dev;
    return;
  fi;
  mysqldump -u$DEV_MYSQL_USERNAME -p$DEV_MYSQL_PASSWORD -h$DEV_MYSQL_HOST $db_name > ~/Downloads/$db_name-dev.sql
  wp db import ~/Downloads/$db_name-dev.sql;
  #rm ~/Downloads/$db_name-dev.sql;
  wp_replace_urls;
  wp_reset_admin_user;
}


function wp_build_themes () {
  abspath=$(wp eval 'echo ABSPATH;' --allow-root);
  wp_content_dir=$(wp eval 'echo WP_CONTENT_DIR;' --allow-root);
  cd $abspath"wp-content/themes";
  available_themes=$(ls -d */ | cut -f1 -d'/');
  for theme in $available_themes;
  do
    cd $wp_content_dir/themes/$theme;
    build_project;
  done
}

# see here: https://wp-cli.org/commands/user/update/
function wp_reset_admin_user () {
  admin_pass=admin;
  wp user create $(strip_email_domain) $(git config user.email) --role=administrator --display_name="$(git config user.name)" --first_name="$(git config user.name)" --last_name="";
  wp user update $(strip_email_domain) --user_pass=$admin_pass --user_email=$(git config user.email) --allow-root --skip-email --skip-plugins --skip-theme;
  echo "Admin Username = '$(strip_email_domain)'";
  echo "Admin Password = '$admin_pass'";
  wp option update 'admin_email' $(git config user.email);
}

function wp_remove_core_keep_contents {

  rm -rf wp-admin 
  rm -rf wp-includes 
  rm wp-*.php;
  rm xmlrpc.php;
  rm index.php;
  rm license.txt;
  rm readme.html;
  rm google*.html;
  rm test.php;
  rm .gitignore;
  touch .gitignore;
  rm legacy-feed.xml;
  echo "Replace the .gitignore file with the one from here: https://bitbucket.org/snippets/24dotcom/kkK8z";

  git add wp-admin 
  git add wp-includes 
  git add wp-*.php
  git add .gitignore;
  git add index.php;
  git add xmlrpc.php;
  git add license.txt;
  git add readme.html;
  git add google*.html;
  git add test.php;
  git add legacy-feed.xml;
  git commit -m "Removed WP Core files from the repo";

  mv wp-content/* .;
  rm -r wp-content;
  git add wp-content 
  git add themes/;
  git add plugins/;
  git add index.php;
  git add languages/;

  git commit -m "Moved contents of wp-content to repo root";

  echo "Don't forget to push!!!";

  remove_tracked_ignored_files;

}


function wp_uploads_to_dev (){
  site_name=$(wp_site_name);
  local_uploads_path=/usr/local/var/www/$site_name/wp-content/uploads/;
  remote_wp_content_path=/var/www/$site_name/wp-content/;
  scp -r $local_uploads_path $DEV_WWW_USERNAME@$DEV_WWW_HOST:$remote_wp_content_path
}


function wp_db_to_dev (){

  console.danger "This will REPLACE the database on DEV!!!";
  get_user_input "is that ok?" --default="yes";

  if [ -z $1 ]
  then
    db_name=$(wp_db_name);
  else
    db_name=$1;
  fi;

  db_name=$(get_user_input "Enter Local Database Name" --default=$db_name);
  dev_db_name=$(get_user_input "Enter Dev Database Name" --default=$db_name);

  site_name=$(wp_site_name);

  export_file=~/Downloads/backup-$db_name.sql;
  wp search-replace local.$site_name dev.$site_name --export=$export_file;

  local_db_file_path=$export_file;

  # site_url=$(wp_site_url);
  # site_url=$(get_user_input "Enter in th Site URL with no environment prefixes" --default=$site_url);

  # wp search-replace local.$site_name dev.$site_name --export=$local_db_file_path;


  replace TYPE=MyISAM ENGINE=MyISAM -- $local_db_file_path;

  # mysql -u$DEV_MYSQL_USERNAME -p$DEV_MYSQL_PASSWORD -h$DEV_MYSQL_HOST -e "DROP DATABASE IF EXISTS $dev_db_name";

  # backup_database $db_name;
  # local_db_file_path=/$backup_path/$db_name"_db_"$date.sql;

  #mysql -u$DEV_MYSQL_USERNAME -p$DEV_MYSQL_PASSWORD -h$DEV_MYSQL_HOST -e "CREATE DATABASE IF NOT EXISTS $dev_db_name";
  mysql -u$DEV_MYSQL_USERNAME -p$DEV_MYSQL_PASSWORD -h$DEV_MYSQL_HOST -D$dev_db_name --default-character-set=utf8 < $local_db_file_path;

  # if you get the following error:
  # @see https://dev.mysql.com/doc/refman/5.7/en/charset-database.html
  # @see https://wordpress.stackexchange.com/questions/250260/unknown-collation-when-i-import-a-dump-from-an-existing-site-into-a-development
  #
  # Try the following:
  # USE db_name;
  # SELECT @@character_set_database, @@collation_database;
  # mysql -uroot -D$db_name -e "ALTER DATABASE $db_name CHARACTER SET 'latin1' COLLATE 'latin1_swedish_ci';;"

  #ERRORS:
  #mysql: [Warning] Using a password on the command line interface can be insecure.
  #ERROR 1064 (42000) at line 275: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'TYPE=MyISAM AUTO_INCREMENT=14' at line 7
  # run the following on the sql dump file
  # replace TYPE=MyISAM ENGINE=MyISAM -- /Users/craigiswayne/Downloads/rodale_db_2017_Jun_27.sql
  # replace local.mh.co.za dev.mh.co.za -- /Users/craigiswayne/Downloads/rodale_db_2017_Jun_27.sql
}

function wp_backup_database () {

  if [ -z $1 ]
  then
    db_name=$(get_user_input "Enter Database Name" --default=$(wp_db_name));
  else
    db_name=$1;
  fi;

  user="wordpress";
  password="wordpress";
  date=$(date +"%Y_%b_%d");
  host="localhost";
  backup_path=~/Downloads;
  output_file=$backup_path/$db_name"_db_"$date.sql;
  echo $output_file;
  umask 177;
  echo "Backing up to... "$output_file;

  # see: https://makandracards.com/makandra/595-dumping-and-importing-from-to-mysql-in-an-utf-8-safe-way
  mysqldump --compatible=mysql4 --user=$user --password=$password --host=$host $db_name --skip-set-charset --add-drop-trigger --add-drop-database --default-character-set=utf8 -r $output_file;
  replace "TYPE=InnoDB" "Engine=InnoDB" -- $output_file;
  replace "TYPE=MyISAM" "Engine=MyISAM" -- $output_file;
  # replace "utf8mb4_unicode_520_ci" "utf8_general_ci" -- $output_file;
  console.success "Backup finished :)";

  # --default-character-set=latin1



  #TODO show file size after backup
  # Delete files older than 30 days
  # find $backup_path/* -mtime +30 -exec rm {} \;
  # --databases $DB_NAME
  # TODO allow for multiple backups to separate files
}
