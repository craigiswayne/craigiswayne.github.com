# Git Overrides
function git () {

  if [[ "$1" == "status" ]]
  then

    if [ -f composer.json ]
    then
      composer status -v;
    fi;

    files_changed="$(git diff --name-only)";
    php_lint $files_changed;
    # find_todos_and_fixmes $files_changed;
    # wp_standards;
    command git "$@"
  elif [ "$1" == "clone" ] && [ ! -z "$3"  ]
  then
    command git "$@"
    cd $2;
  elif [[ "$1" == "commit" ]]
  then
    echo "Have you done repo maintenance?";
    command git "$@"
  elif [[ "$1" == "log" ]]
  then
    command git "$@"  --decorate --oneline;
  elif [[ "$1" == "clone" ]]
  then
    command git "$@";
  else
    command git "$@"
  fi
}

function git_submodule_exists {
  submodule_name=$(get_user_input "Enter Submodule Name" --default=$1);
  result=$(git submodule status | grep $submodule_name | cut -d " " -f 2);

  if [ $result == $submodule_name ]
  then
    return 0; # true
  else
    return 1; # false
  fi;
}

function git_get_version () {
  version=$(git describe);
  version=${version##*v};
  version=${version%-*};
  version=${version%-*};
  echo $version;
}

function git_repo_url (){
  echo $(git remote get-url --push origin);
}

function git_repo_name (){
  repo_url=$(git_repo_url);
  repo_name=${repo_url##*/};
  repo_name=${repo_name%.*};
  echo $repo_name;
}

function git_calc_root () {
  [[ ! -z $1 ]] && start="$1" || start=".";
  git_config_dir=$(find $start -mindepth 1 -maxdepth 2 -type d -iname ".git" | head -n 1);
  git_config_root=$( dirname $git_config_dir )
  echo $git_config_root;
}

function git_get_all_branches () {
  git fetch --all;
  git branch -v;
}


function git_show_all_branches () {
  git branch -r;
  # for b in `git branch -r | grep -v -- '->'`; do git branch --track ${b##origin/} $b; done
}

function git_delete_tag (){
  git fetch --all;
  tag_name=$(get_user_input "Enter Tag Name");
  git tag -d $tag_name;
  git push origin :refs/tags/$tag_name;
}

function git_remove_submodule () {
  submodule_name=$(get_user_input "Enter Submodule Name" --default=$1);

  submodule_path=$(get_user_input "Enter Submodule Path" --default="wp-content/plugins/$submodule_name");

  git submodule deinit $submodule_path;
  git rm $submodule_path;

  git rm -r --cached $submodule_path;
  # overkill

  git submodule status;

  #overkill again (pedantic)
  rm -rf $submodule_path;
  git submodule init;
  git submodule status;
  git clean -d -f -f;
}

function git_merge_develop() {
  git fetch --all && git merge origin/develop
}
